# Copyright: (c) 2020, Hetzner Cloud GmbH <info@hetzner-cloud.de>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
---
- name: Test missing required parameters
  hetzner.hcloud.certificate:
    name: "{{ hcloud_certificate_name }}"
    state: present
  ignore_errors: true
  register: result
- name: Verify missing required parameters
  ansible.builtin.assert:
    that:
      - result is failed
      - 'result.msg == "missing required arguments: certificate, private_key"'

- name: Test create with check mode
  hetzner.hcloud.certificate:
    name: "{{ hcloud_certificate_name }}"
    certificate: "{{ test_certificate_content }}"
    private_key: "{{ test_certificate_privatekey_content }}"
    labels:
      key: value
  check_mode: true
  register: result
- name: Verify create with check mode
  ansible.builtin.assert:
    that:
      - result is changed

- name: Test create
  hetzner.hcloud.certificate:
    name: "{{ hcloud_certificate_name }}"
    certificate: "{{ test_certificate_content }}"
    private_key: "{{ test_certificate_privatekey_content }}"
    labels:
      key: value
  register: result
- name: Verify create
  ansible.builtin.assert:
    that:
      - result is changed
      - result.hcloud_certificate.name == hcloud_certificate_name
      - result.hcloud_certificate.domain_names[0] ==  "www.example.com"
      - result.hcloud_certificate.labels.key == "value"

- name: Test create idempotency
  hetzner.hcloud.certificate:
    name: "{{ hcloud_certificate_name }}"
    certificate: "{{ test_certificate_content }}"
    private_key: "{{ test_certificate_privatekey_content }}"
    labels:
      key: value
  register: result
- name: Verify create idempotency
  ansible.builtin.assert:
    that:
      - result is not changed

- name: Test update with check mode
  hetzner.hcloud.certificate:
    id: "{{ result.hcloud_certificate.id }}"
    name: "{{ hcloud_certificate_name }}-changed"
  register: result
  check_mode: true
- name: Verify updating in check mode
  ansible.builtin.assert:
    that:
      - result is changed

- name: Test updating
  hetzner.hcloud.certificate:
    id: "{{ test_certificate.hcloud_certificate.id }}"
    name: "{{ hcloud_certificate_name }}-changed"
    labels:
      key: value
      test: changed
  register: result
- name: Verify updating
  ansible.builtin.assert:
    that:
      - result is changed
      - result.hcloud_certificate.name == hcloud_certificate_name + "-changed"
      - result.hcloud_certificate.labels.test == "changed"

- name: Test updating (rename)
  hetzner.hcloud.certificate:
    id: "{{ test_certificate.hcloud_certificate.id }}"
    name: "{{ hcloud_certificate_name }}"
  register: result
- name: Verify updating (rename)
  ansible.builtin.assert:
    that:
      - result is changed
      - result.hcloud_certificate.name == hcloud_certificate_name

- name: Test deleting
  hetzner.hcloud.certificate:
    id: "{{ test_certificate.hcloud_certificate.id }}"
    state: absent
  register: result
- name: Verify deleting
  ansible.builtin.assert:
    that:
      - result is success

- name: Generate _tmp_dns_test_domain
  ansible.builtin.set_fact:
    # hcloud_dns_test_domain contains the random filter, which generates a new
    # value on each invocation.
    _tmp_dns_test_domain: "{{ hcloud_dns_test_domain }}"

- name: Test creating managed
  hetzner.hcloud.certificate:
    name: "{{ hcloud_certificate_name }}"
    domain_names:
      - "{{ _tmp_dns_test_domain }}"
    type: managed
    labels:
      HC-Use-Staging-CA: "true"
  register: result
- name: Verify creating managed
  ansible.builtin.assert:
    that:
      - result is changed
      - result.hcloud_certificate.name == hcloud_certificate_name
      - result.hcloud_certificate.domain_names[0] == _tmp_dns_test_domain

- name: Test deleting managed
  hetzner.hcloud.certificate:
    name: "{{ hcloud_certificate_name }}"
    state: absent
  register: result
- name: Verify deleting managed
  ansible.builtin.assert:
    that:
      - result is success
